# 1. ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏à‡∏≤‡∏Å .env ‡∏Å‡πà‡∏≠‡∏ô
from dotenv import load_dotenv
load_dotenv()

# 2. import library ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
import os
import sys
import time
import hmac
import json
import hashlib
import requests
import urllib3
from datetime import datetime

# --- ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ (Configuration & Constants) ---

# ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô InsecureRequestWarning ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ verify=False
# ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ verify=False ‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Production ‡∏à‡∏£‡∏¥‡∏á
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# --- ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env ---
BITKUB_API_KEY = os.environ.get('BITKUB_API_KEY')
BITKUB_API_SECRET = os.environ.get('BITKUB_API_SECRET')
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID')
AMOUNT = int(os.environ.get('AMOUNT', 100)) # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô 100 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô .env

# --- ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Bitkub API ---
BITKUB_API_HOST = 'https://api.bitkub.com'
SYMBOL = 'btc_thb'

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Bitkub API ---

def gen_sign(api_secret: str, payload_string: str) -> str:
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á Signature ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡∏±‡∏ö Bitkub API
    
    Args:
        api_secret: The API secret key.
        payload_string: The string to sign.
        
    Returns:
        The generated signature in hexdigest format.
    """
    return hmac.new(api_secret.encode('utf-8'), payload_string.encode('utf-8'), hashlib.sha256).hexdigest()

def bitkub_api_request(path: str, method: str = 'POST', data: dict = None) -> dict:
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á Request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Bitkub API
    
    Args:
        path: The API endpoint path (e.g., '/api/v3/market/wallet').
        method: The HTTP method (e.g., 'POST').
        data: The request body payload.
        
    Returns:
        A dictionary containing the JSON response from the API.
    """
    if data is None:
        data = {}
        
    ts = str(round(time.time() * 1000))
    payload_list = [ts, method.upper(), path, json.dumps(data)]
    sig = gen_sign(BITKUB_API_SECRET, ''.join(payload_list))
    
    headers = {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'X-BTK-TIMESTAMP': ts,
        'X-BTK-SIGN': sig,
        'X-BTK-APIKEY': BITKUB_API_KEY
    }
    
    try:
        response = requests.request(
            method, 
            BITKUB_API_HOST + path, 
            headers=headers, 
            data=json.dumps(data), 
            verify=False # ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Production
        )
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error during API request to {path}: {e}")
        return {"error": -1, "message": str(e)} # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ error ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô

def get_wallet_balances() -> tuple[float | None, float | None]:
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô (THB ‡πÅ‡∏•‡∏∞ BTC)
    
    Returns:
        A tuple containing THB balance and BTC balance. Returns (None, None) on failure.
    """
    path = '/api/v3/market/wallet'
    data = bitkub_api_request(path)
    
    if data.get('error') == 0:
        balances = data.get('result', {})
        thb_balance = balances.get('THB', 0)
        btc_balance = balances.get('BTC', 0)
        return thb_balance, btc_balance
    else:
        print(f"Error fetching wallet (API Error): {data}")
        return None, None

def place_buy_order(symbol: str, amount: int) -> dict:
    """
    ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏ö‡∏ö Market Order
    
    Args:
        symbol: The trading symbol (e.g., 'BTC_THB').
        amount: The amount in THB to buy.
        
    Returns:
        The JSON response from the place-bid API.
    """
    path = '/api/v3/market/place-bid'
    req_body = {
        'sym': symbol.lower(), 
        'amt': amount,       
        'typ': 'market',
        'rat': 10
    }
    print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (Market Buy) {amount} THB ({symbol})...")
    response = bitkub_api_request(path, data=req_body)
    print(f"Order Response: {response}")
    return response

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Telegram ---

def send_to_telegram(message: str):
    """
    ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Telegram Chat ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    
    Args:
        message: The text message to send.
    """
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {'chat_id': TELEGRAM_CHAT_ID, 'text': message}
    
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        print("Telegram message sent successfully!")
    except requests.exceptions.RequestException as e:
        print(f"Error sending to Telegram: {e}")

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏Å (Main Logic) ---

def main():
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó DCA
    """
    # --- 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment Variables ---
    if not all([BITKUB_API_KEY, BITKUB_API_SECRET, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID]):
        print("Error: Environment variables (API Keys, Token, Chat ID) are not set.")
        print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå .env ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
        sys.exit(1)

    # --- 2. ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ---
    order_data = place_buy_order(SYMBOL, AMOUNT)
    
    # --- 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ---
    if order_data.get('error') == 0:
        print("‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠...")
        time.sleep(3) # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö Bitkub ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        
        thb_bal, btc_bal = get_wallet_balances()
        
        if thb_bal is not None and btc_bal is not None:
            btc_balance_str = f"{btc_bal:.8f}"
            thb_balance_str = f"{thb_bal:,.2f}"
            
            message = f"""{datetime.now().strftime("%Y-%m-%d")}
            
**‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à DCA ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üöÄ**
‚ú® ‡πÑ‡∏î‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á!
* **‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç:** {SYMBOL.split('_')[0]}
* **‡∏¢‡∏≠‡∏î‡∏ã‡∏∑‡πâ‡∏≠:** {AMOUNT} THB (Market Order)
* **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢

üí∞ **‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Balance ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:**
* **BTC:** {btc_balance_str} üìà
* **THB ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:** {thb_balance_str}

üî• Keep stacking those sats!"""
            
            send_to_telegram(message)
            print(message)
        else:
            print("‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
            error_message = f"""**‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à DCA (‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚ö†Ô∏è**

‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ {SYMBOL} {AMOUNT} THB (Market Order) **‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß**
(Response: {order_data})

‡πÅ‡∏ï‡πà **‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏î‡πâ** ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ Bitkub ‡∏Ñ‡∏£‡∏±‡∏ö

üî• Check your sats!"""
            send_to_telegram(error_message)
            
    else:
        print("‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
        error_reason = order_data.get('message', 'Unknown error')
        error_message = f"""**‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à DCA ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß! ‚ùå**

‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ {SYMBOL} {AMOUNT} THB (Market Order) ‡πÑ‡∏î‡πâ
**‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏:** {error_reason}

üî• DCA ‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏∞‡∏á‡∏±‡∏Å!"""
        send_to_telegram(error_message)

    print("DCA Bot run complete.")


if __name__ == '__main__':
    print("**********************")
    print("Starting DCA Bot...")
    main()
    print("**********************")
